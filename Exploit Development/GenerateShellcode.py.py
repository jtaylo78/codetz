#!/usr/bin/env python

import sys

def getParts(dword, max):
        case = 1
        for i in dword:
		i = int(i,16)
                if i > max and i < max*2 and case < 2:
                        case = 2
                elif i >= max*2 and case < 3:
                        case = 3
        return case

def getStr(num):
	#return hex(num).replace('0x', '\\x')
	return '\\x%02x' % num

# Return as int
def getC2(num):
	num = int(''.join(num), 16)
	c2 = pow(2,32) - num
	#return hex(c2)[:-1]
	return c2

# Turn 0xHHHHHH format to byte list
def getList(num):
	ret = []
	# Remove L
	tmp = hex(num)[:-1].replace('0x','')
	for i in range(0,7,2):
		ret.append(tmp[i:i+2])
	return ret

def main():
	# Variables
	max = int('7c',16)

	# Fix
	num = sys.argv[1]
	num = num.split('\\x')[::-1]
	num.pop()
	num = num[::-1]

	print "Shellcode\t\t2's comp\t\tSUB values"
	# Chop by pieces
	for x in range(0,len(num)-3,4):
	        ret = []
        	c2 = []
		chunk = num[x:x+4]

		# Partes
		parts = getParts(chunk, max)
		for i in range(parts):
			ret.append('')
	
		c2 = getList(getC2(chunk))
	
		# Ciclo palabra
		for i in c2:
			i = int(i, 16)
			if i <= max:
				if parts == 1:
					ret[0] += getStr(i)
				elif parts == 2:
					ret[0] += getStr(i-1)
					ret[1] += getStr(1)
				elif parts == 3:
					ret[0] += getStr(i-2)
					ret[1] += getStr(1)
					ret[2] += getStr(1)
			elif i > max and i < max*2:
				ret[0] += getStr(max)
				if parts == 2:
					ret[1] += getStr(i-max)
				elif parts == 3:
					ret[1] += getStr(i-max-1)
					ret[2] += getStr(1)	
			elif i >= max*2:
				ret[0] += getStr(max)
				ret[1] += getStr(max)
				ret[2] += getStr(i - max*2)
			#ret[cnt] += hex(tmp)

		print '\\x%s\t\\x%s\t' % ('\\x'.join(chunk),'\\x'.join(c2)) + '%s\t' % '\t'.join(ret)
#		print '*Sub: '
#		for i in range(parts):
#			print ret[i]


if len(sys.argv) != 2:
	print '[*] %s <shellcode>' % sys.argv[0]
	exit(0)

main()
